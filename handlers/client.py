from aiogram import types, Dispatcher
from aiogram.types.message import ContentType
from config import bot
from keyboards import mainManuKb, addClinentInfoKb, addPhoneKb, addLocationKb, cancelKb
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.sqllite import getClientInfo, addClient, addClientInfo

# ! –û–±—ä—è–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class QuestionsClientInfo(StatesGroup):
    info_menu = State()
    phone = State()
    location = State()

# ! –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—ã–Ω–Ω—ã—Ö, –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ info_menu
# ! –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏


def checkClientInfo(clientId):
    client_status = None
    data = getClientInfo(clientId)
    if data[3] is None and data[4] is None:
        client_status = 'zero'
    elif data[3] is None and data[4] is not None:
        client_status = 'location'
    elif data[3] is not None and data[4] is None:
        client_status = 'phone'
    else:
        client_status = 'done'
    mess = f'''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
TG Nickname: {data[0]}
–§–ò–û: {data[2]} {data[1]}
–õ–æ–∫–∞—Ü–∏—è: {data[3]}
–¢–µ–ª–µ—Ñ–æ–Ω: {data[4]}

–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—è '–õ–æ–∫–∞—Ü–∏—è' –∏ '–¢–µ–ª–µ—Ñ–æ–Ω' –∏–º–µ—é—Ç
–∑–Ω–∞—á–µ–Ω–∏–µ 'None',
–∑–Ω–∞—á–∏—Ç –í—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –∏—Ö –º–Ω–µ —Ä–∞–Ω–µ–µ.'''
    return mess, client_status

# ! –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def commandStart(message: types.Message):
    client_id = message.from_user.id
    user = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    try:
        await bot.send_message(message.from_user.id, '–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!\
            \n–Ø –±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É –ö—Ä–∞—Å–Ω–æ–π –∏–∫—Ä—ã –∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤ –ú–ï–ù–Æ –Ω–∏–∂–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                               reply_markup=mainManuKb)
        await message.delete()
        addClient(client_id, user, first_name, last_name)
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ –õ–°. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É: \nhttps://t.me/RedCaviarBot')


# ! –ò–¥–µ–º –≤ –º–µ–Ω—é –∏–Ω—Ñ–æ –∫–ª–∏–µ–Ω—Ç–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
async def clientInfo(event: types.Message, state: FSMContext):
    await QuestionsClientInfo.info_menu.set()
    data = checkClientInfo(event.from_user.id)
    if data[1] == 'zero':
        await event.answer(data[0], reply_markup=addClinentInfoKb)
    elif data[1] == 'phone':
        await event.answer(data[0], reply_markup=addPhoneKb)
    elif data[1] == 'location':
        await event.answer(data[0], reply_markup=addLocationKb)
    else:
        await state.finish()
        await event.answer(data[0], reply_markup=mainManuKb)

# ! –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ù–ê–ó–ê–î –≤ –º–µ–Ω—é –∏–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ
async def backMainMenu(event: types.Message, state: FSMContext):
        await bot.send_message(chat_id=event.from_user.id, text='–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:', reply_markup=mainManuKb)
        await state.finish()

# ! –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
async def addClientPhone(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - 79991234567', reply_markup=cancelKb)
    await QuestionsClientInfo.phone.set()


# ! –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
async def addClientLocation(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:', reply_markup=cancelKb)
    await QuestionsClientInfo.location.set()



# ! –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def setDataPhone(event: types.Message, state: FSMContext):
    if event.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await QuestionsClientInfo.info_menu.set()
        data = checkClientInfo(event.from_user.id)
        if data[1] == 'zero':
            await event.answer(data[0], reply_markup=addClinentInfoKb)
        elif data[1] == 'location':
            await event.answer(data[0], reply_markup=addLocationKb)
        elif data[1] == 'phone':
            await event.answer(data[0], reply_markup=addPhoneKb)
        else:
            await state.finish()
            await event.answer(data[0], reply_markup=mainManuKb)
    else:
        async with state.proxy() as data:
            data['phone'] = event.text
        addClientInfo(data['phone'], event.from_user.id, 'phone')
        inf = checkClientInfo(event.from_user.id)
        if inf[1] == 'location':
            await QuestionsClientInfo.info_menu.set()
            await event.answer(inf[0], reply_markup=addLocationKb)
            await event.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {data['phone']} - —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ.")
        else:
            await state.finish()
            await event.answer(inf[0], reply_markup=mainManuKb)
            await event.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {data['phone']} - —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ.")


# ! –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏
async def setDataLocation(event: types.Message, state: FSMContext):
    if event.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        await QuestionsClientInfo.info_menu.set()
        data = checkClientInfo(event.from_user.id)
        if data[1] == 'zero':
            await event.answer(data[0], reply_markup=addClinentInfoKb)
        elif data[1] == 'location':
            await event.answer(data[0], reply_markup=addLocationKb)
        elif data[1] == 'phone':
            await event.answer(data[0], reply_markup=addPhoneKb)
        else:
            await state.finish()
            await event.answer(data[0], reply_markup=mainManuKb)
    else:
        async with state.proxy() as data:
            data['location'] = event.text
        addClientInfo(data['location'], event.from_user.id, 'location')
        inf = checkClientInfo(event.from_user.id)
        if inf[1] == 'phone':
            await QuestionsClientInfo.info_menu.set()
            await event.answer(inf[0], reply_markup=addPhoneKb)
            await event.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –õ–æ–∫–∞—Ü–∏—è {data['location']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ.")
        else:
            await state.finish()
            await event.answer(inf[0], reply_markup=mainManuKb)
            await event.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –õ–æ–∫–∞—Ü–∏—è {data['location']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ.")

# ! —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(commandStart, commands=['start', 'help'])
    dp.register_message_handler(
        clientInfo, Text(equals='üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ'), state='*')
    dp.register_message_handler(backMainMenu, Text(equals='–ù–∞–∑–∞–¥'), state = QuestionsClientInfo.info_menu)
    dp.register_message_handler(
        addClientPhone, Text(equals = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'), state = QuestionsClientInfo.info_menu)
    dp.register_message_handler(
        addClientLocation, Text(equals = '–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'), state = QuestionsClientInfo.info_menu)
    dp.register_message_handler(
        setDataPhone, content_types=ContentType.TEXT, state=QuestionsClientInfo.phone)
    dp.register_message_handler(
        setDataLocation, content_types=ContentType.TEXT, state=QuestionsClientInfo.location)
